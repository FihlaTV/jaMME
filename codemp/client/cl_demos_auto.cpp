// Copyright (C) 2015 ent (entdark)
//
// cl_demos_auto.c - autorecording demos routine
//
// credits: 
// - teh aka dumbledore aka teh_1337: autorecording demos
// - CaNaBiS: formatting with %

#include "client.h"

#define MAX_TIMESTAMPS 256

typedef struct demoAuto_s {
	char defaultName[MAX_QPATH];
	char demoName[MAX_QPATH];
	char customName[MAX_QPATH];
	int timeStamps[MAX_TIMESTAMPS];
} demoAuto_t;

static demoAuto_t demoAuto;
static char mod[MAX_QPATH];

char *demoAutoFormat(const char* name) {	
	const	char *format;
	qboolean haveTag = qfalse;
	char	outBuf[512];
	int		outIndex = 0;
	int		outLeft = sizeof(outBuf) - 1;
	
	int t = 0;
	char timeStamps[MAX_QPATH] = "";
	qtime_t ct;

	char playerName[MAX_QPATH], *mapName = COM_SkipPath(Info_ValueForKey((cl.gameState.stringData + cl.gameState.stringOffsets[CS_SERVERINFO]), "mapname"));
	Q_strncpyz(playerName, Info_ValueForKey((cl.gameState.stringData + cl.gameState.stringOffsets[CS_PLAYERS+cl.snap.ps.clientNum]), "n"), sizeof(playerName));
	if (cls.uag.newColors)
		Q_StripColorUAG(playerName);
	else
		Q_StripColor(playerName);
	Com_RealTime(&ct);
	
	format = cl_autoDemoFormat->string;
	if (!format || !format[0]) {
		if (!name || !name[0]) {
			format = "%t";
		} else {
			format = "%n_%t";
		}
	}

	while (*format && outLeft  > 0) {
		if (haveTag) {
			char ch = *format++;
			haveTag = qfalse;
			switch (ch) {
			case 'd':		//date
				Com_sprintf( outBuf + outIndex, outLeft, "%d-%02d-%02d-%02d%02d%02d",
								1900+ct.tm_year, ct.tm_mon+1,ct.tm_mday,
								ct.tm_hour, ct.tm_min, ct.tm_sec);
				outIndex += strlen( outBuf + outIndex );
				break;
			case 'm':		//map
				Com_sprintf( outBuf + outIndex, outLeft, mapName);
				outIndex += strlen( outBuf + outIndex );
				break;
			case 'n':		//custom demo name
				Com_sprintf( outBuf + outIndex, outLeft, name);
				outIndex += strlen( outBuf + outIndex );
				break;
			case 'p':		//current player name
				Com_sprintf( outBuf + outIndex, outLeft, playerName);
				outIndex += strlen( outBuf + outIndex );
				break;
			case 't':		//timestamp
				while (demoAuto.timeStamps[t] && t < MAX_TIMESTAMPS) {
					int min = demoAuto.timeStamps[t] / 60000;
					int sec = (demoAuto.timeStamps[t] / 1000) % 60;
					if (t == 0) {
						Com_sprintf(timeStamps, sizeof(timeStamps), "%0.2d%0.2d", min, sec);
					} else {
						Com_sprintf(timeStamps, sizeof(timeStamps), "%s_%0.2d%0.2d", timeStamps, min, sec);
					}
					t++;
				}
				Com_sprintf( outBuf + outIndex, outLeft, timeStamps);
				outIndex += strlen( outBuf + outIndex );
				break;
			case '%':
				outBuf[outIndex++] = '%';
				break;
			default:
				continue;
			}
			outLeft = sizeof(outBuf) - outIndex - 1;
			continue;
		}
		if (*format == '%') {
			haveTag = qtrue;
			format++;
			continue;
		}
		outBuf[outIndex++] = *format++;
		outLeft = sizeof(outBuf) - outIndex - 1;
	}
	outBuf[ outIndex ] = 0;
	return va("%s", outBuf);
}

// Standard naming for screenshots/demos
static char *demoAutoGenerateDefaultFilename(void) {
	qtime_t ct;
	const char *pszServerInfo = cl.gameState.stringData + cl.gameState.stringOffsets[CS_SERVERINFO];
	
	Com_RealTime(&ct);
	return va("%d-%02d-%02d-%02d%02d%02d-%s",
								1900+ct.tm_year, ct.tm_mon+1,ct.tm_mday,
								ct.tm_hour, ct.tm_min, ct.tm_sec,
								COM_SkipPath(Info_ValueForKey(pszServerInfo, "mapname")));
}

void demoAutoSave_f(void) {
	int t = 0;
	if (strstr(cl_autoDemoFormat->string, "%t"))
		while (demoAuto.timeStamps[t] && t < MAX_TIMESTAMPS)
			t++;
	demoAuto.timeStamps[t] = cl.serverTime - atoi(cl.gameState.stringData + cl.gameState.stringOffsets[CS_LEVEL_START_TIME]);

	if (!(Cmd_Argc() < 2)) {
		Q_strncpyz(demoAuto.customName, Cmd_Argv( 1 ), sizeof(demoAuto.customName));
	}
	Com_sprintf(demoAuto.demoName, sizeof(demoAuto.demoName), demoAutoFormat(demoAuto.customName));
	Com_Printf(S_COLOR_WHITE"Demo will be saved into "S_COLOR_GREEN"%s.dm_26\n", demoAuto.demoName);
}

void demoAutoSaveLast_f(void) {
	if (Cmd_Argc() < 2 && FS_CopyFile(va("%s/demos/LastDemo/LastDemo.dm_26", mod), va("%s/demos/%s.dm_26", mod, demoAutoGenerateDefaultFilename()), NULL, 0)) {
		Com_Printf(S_COLOR_GREEN"LastDemo successfully saved\n");
	} else if (FS_CopyFile(va("%s/demos/LastDemo/LastDemo.dm_26", mod), va("%s/demos/%s.dm_26", mod, Cmd_Argv( 1 )), NULL, 0)) {
		Com_Printf(S_COLOR_GREEN"LastDemo successfully saved into %s.dm_26\n", Cmd_Argv( 1 ));
	} else {
		Com_Printf(S_COLOR_RED"LastDemo has failed to save\n");
	}
}

void demoAutoComplete(void) {
	char newName[MAX_QPATH];
	//if we are not manually saving, then temporarily store a demo in LastDemo folder
	if (!*demoAuto.demoName && FS_CopyFile(va("%s/demos/%s.dm_26", mod, demoAuto.defaultName), va("%s/demos/LastDemo/LastDemo.dm_26", mod), NULL, 0)) {
		Com_Printf(S_COLOR_GREEN"Demo temporarily saved into LastDemo/LastDemo.dm_26\n");
	} else if (FS_CopyFile(va("%s/demos/%s.dm_26", mod, demoAuto.defaultName), va("%s/demos/%s.dm_26", mod, demoAuto.demoName), newName, sizeof(newName))) {
		Com_Printf(S_COLOR_GREEN"Demo successfully saved into %s.dm_26\n", (Q_stricmp(newName, "")) ? newName : demoAuto.demoName);
	} else {
		Com_Printf(S_COLOR_RED"Demo has failed to save\n");
	}
}

// Dynamically names a demo and sets up the recording
void demoAutoRecord(void) {
	char *val;
	memset(&demoAuto, 0, sizeof(demoAuto_t));
	Q_strncpyz(demoAuto.defaultName, "LastDemo/LastDemo_recording", sizeof(demoAuto.defaultName));
	val = Cvar_VariableString("g_synchronousclients" );
	Cbuf_AddText(va("set g_synchronousclients 1;record %s;set g_synchronousclients %s\n", demoAuto.defaultName, val));
}

void demoAutoInit(void) {
	cvar_t *fs_game;
	memset(&demoAuto, 0, sizeof(demoAuto_t));
	fs_game = Cvar_FindVar ("fs_game" );
	if (!fs_game) {
		Q_strncpyz(mod, "base", sizeof(mod));
	} else {
		Q_strncpyz(mod, fs_game->string, sizeof(mod));
	}
}
